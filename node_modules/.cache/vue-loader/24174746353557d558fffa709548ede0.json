{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue?vue&type=template&id=1b90589d&ts=true","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue","mtime":1650820970834},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1650821117514},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxDb25maWdQYW5lIC8+DQogIDxkaXYgdi1pZj0iIXdhbGxldCIgY2xhc3M9InRleHQtY2VudGVyIj5QbHMgY29ubmVjdCAoYnVybmVyKSB3YWxsZXQ8L2Rpdj4NCiAgPGRpdiB2LWVsc2U+DQogICAgPCEtLWZhcm0gYWRkcmVzcy0tPg0KICAgIDxkaXYgY2xhc3M9Im5lcy1jb250YWluZXIgd2l0aC10aXRsZSBtYi0xMCI+DQogICAgICA8cCBjbGFzcz0idGl0bGUiPkNvbm5lY3QgdG8gYSBGYXJtPC9wPg0KICAgICAgPGRpdiBjbGFzcz0ibmVzLWZpZWxkIG1iLTUiPg0KICAgICAgICA8bGFiZWwgZm9yPSJmYXJtIj5GYXJtIGFkZHJlc3M6PC9sYWJlbD4NCiAgICAgICAgPGlucHV0IGlkPSJmYXJtIiBjbGFzcz0ibmVzLWlucHV0IiB2LW1vZGVsPSJmYXJtIiAvPg0KICAgICAgPC9kaXY+DQogICAgPC9kaXY+DQoNCiAgICA8ZGl2IHYtaWY9ImZhcm1lckFjYyI+DQogICAgICA8RmFybWVyRGlzcGxheQ0KICAgICAgICA6a2V5PSJmYXJtZXJBY2MiDQogICAgICAgIDpmYXJtPSJmYXJtIg0KICAgICAgICA6ZmFybUFjYz0iZmFybUFjYyINCiAgICAgICAgOmZhcm1lcj0iZmFybWVyIg0KICAgICAgICA6ZmFybWVyQWNjPSJmYXJtZXJBY2MiDQogICAgICAgIGNsYXNzPSJtYi0xMCINCiAgICAgICAgQHJlZnJlc2gtZmFybWVyPSJoYW5kbGVSZWZyZXNoRmFybWVyIg0KICAgICAgLz4NCiAgICAgIDxWYXVsdA0KICAgICAgICA6a2V5PSJmYXJtZXJBY2MiDQogICAgICAgIGNsYXNzPSJtYi0xMCINCiAgICAgICAgOnZhdWx0PSJmYXJtZXJBY2MudmF1bHQudG9CYXNlNTgoKSINCiAgICAgICAgQHNlbGVjdGVkLXdhbGxldC1uZnQ9ImhhbmRsZU5ld1NlbGVjdGVkTkZUIg0KICAgICAgPg0KICAgICAgICA8YnV0dG9uDQogICAgICAgICAgdi1pZj0iZmFybWVyU3RhdGUgPT09ICdzdGFrZWQnICYmIHNlbGVjdGVkTkZUcy5sZW5ndGggPiAwIg0KICAgICAgICAgIGNsYXNzPSJuZXMtYnRuIGlzLXByaW1hcnkgbXItNSINCiAgICAgICAgICBAY2xpY2s9ImFkZEdlbXMiDQogICAgICAgID4NCiAgICAgICAgICBBZGQgR2VtcyAocmVzZXRzIHN0YWtpbmcpDQogICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8YnV0dG9uDQogICAgICAgICAgdi1pZj0iZmFybWVyU3RhdGUgPT09ICd1bnN0YWtlZCciDQogICAgICAgICAgY2xhc3M9Im5lcy1idG4gaXMtc3VjY2VzcyBtci01Ig0KICAgICAgICAgIEBjbGljaz0iYmVnaW5TdGFraW5nIg0KICAgICAgICA+DQogICAgICAgICAgQmVnaW4gc3Rha2luZw0KICAgICAgICA8L2J1dHRvbj4NCiAgICAgICAgPGJ1dHRvbg0KICAgICAgICAgIHYtaWY9ImZhcm1lclN0YXRlID09PSAnc3Rha2VkJyINCiAgICAgICAgICBjbGFzcz0ibmVzLWJ0biBpcy1lcnJvciBtci01Ig0KICAgICAgICAgIEBjbGljaz0iZW5kU3Rha2luZyINCiAgICAgICAgPg0KICAgICAgICAgIEVuZCBzdGFraW5nDQogICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8YnV0dG9uDQogICAgICAgICAgdi1pZj0iZmFybWVyU3RhdGUgPT09ICdwZW5kaW5nQ29vbGRvd24nIg0KICAgICAgICAgIGNsYXNzPSJuZXMtYnRuIGlzLWVycm9yIG1yLTUiDQogICAgICAgICAgQGNsaWNrPSJlbmRTdGFraW5nIg0KICAgICAgICA+DQogICAgICAgICAgRW5kIGNvb2xkb3duDQogICAgICAgIDwvYnV0dG9uPg0KICAgICAgICA8YnV0dG9uIGNsYXNzPSJuZXMtYnRuIGlzLXdhcm5pbmciIEBjbGljaz0iY2xhaW0iPg0KICAgICAgICAgIENsYWltIHt7IGF2YWlsYWJsZUEgfX0gQSAvIHt7IGF2YWlsYWJsZUIgfX0gQg0KICAgICAgICA8L2J1dHRvbj4NCiAgICAgIDwvVmF1bHQ+DQogICAgPC9kaXY+DQogICAgPGRpdiB2LWVsc2U+DQogICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgdGV4dC1jZW50ZXIgbWItNSI+DQogICAgICAgIEZhcm1lciBhY2NvdW50IG5vdCBmb3VuZCA6KCBDcmVhdGUgYSBuZXcgb25lPw0KICAgICAgPC9kaXY+DQogICAgICA8ZGl2IGNsYXNzPSJ3LWZ1bGwgdGV4dC1jZW50ZXIiPg0KICAgICAgICA8YnV0dG9uIGNsYXNzPSJuZXMtYnRuIGlzLXByaW1hcnkiIEBjbGljaz0iaW5pdEZhcm1lciI+DQogICAgICAgICAgTmV3IEZhcm1lcg0KICAgICAgICA8L2J1dHRvbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwvZGl2Pg0KICA8L2Rpdj4NCg=="},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACb,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACzC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACrC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;MACrD,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC;;IAEL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACnB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtC,CAAC;MACD,CAAC,CAAC,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5C;QACE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;UACzD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB;UACE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAChC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB;UACE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC9B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB;UACE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACvC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;UAC5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB;UACE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACR,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UAC/C,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;QAC9C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACT,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC,CAAC,CAAC,CAAC;MACL,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACpD,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACV,CAAC,CAAC,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC","file":"C:/Users/ferna/Desktop/HiddenStaking/gem-farm/app/gem-farm/src/views/Farmer.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <ConfigPane />\r\n  <div v-if=\"!wallet\" class=\"text-center\">Pls connect (burner) wallet</div>\r\n  <div v-else>\r\n    <!--farm address-->\r\n    <div class=\"nes-container with-title mb-10\">\r\n      <p class=\"title\">Connect to a Farm</p>\r\n      <div class=\"nes-field mb-5\">\r\n        <label for=\"farm\">Farm address:</label>\r\n        <input id=\"farm\" class=\"nes-input\" v-model=\"farm\" />\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"farmerAcc\">\r\n      <FarmerDisplay\r\n        :key=\"farmerAcc\"\r\n        :farm=\"farm\"\r\n        :farmAcc=\"farmAcc\"\r\n        :farmer=\"farmer\"\r\n        :farmerAcc=\"farmerAcc\"\r\n        class=\"mb-10\"\r\n        @refresh-farmer=\"handleRefreshFarmer\"\r\n      />\r\n      <Vault\r\n        :key=\"farmerAcc\"\r\n        class=\"mb-10\"\r\n        :vault=\"farmerAcc.vault.toBase58()\"\r\n        @selected-wallet-nft=\"handleNewSelectedNFT\"\r\n      >\r\n        <button\r\n          v-if=\"farmerState === 'staked' && selectedNFTs.length > 0\"\r\n          class=\"nes-btn is-primary mr-5\"\r\n          @click=\"addGems\"\r\n        >\r\n          Add Gems (resets staking)\r\n        </button>\r\n        <button\r\n          v-if=\"farmerState === 'unstaked'\"\r\n          class=\"nes-btn is-success mr-5\"\r\n          @click=\"beginStaking\"\r\n        >\r\n          Begin staking\r\n        </button>\r\n        <button\r\n          v-if=\"farmerState === 'staked'\"\r\n          class=\"nes-btn is-error mr-5\"\r\n          @click=\"endStaking\"\r\n        >\r\n          End staking\r\n        </button>\r\n        <button\r\n          v-if=\"farmerState === 'pendingCooldown'\"\r\n          class=\"nes-btn is-error mr-5\"\r\n          @click=\"endStaking\"\r\n        >\r\n          End cooldown\r\n        </button>\r\n        <button class=\"nes-btn is-warning\" @click=\"claim\">\r\n          Claim {{ availableA }} A / {{ availableB }} B\r\n        </button>\r\n      </Vault>\r\n    </div>\r\n    <div v-else>\r\n      <div class=\"w-full text-center mb-5\">\r\n        Farmer account not found :( Create a new one?\r\n      </div>\r\n      <div class=\"w-full text-center\">\r\n        <button class=\"nes-btn is-primary\" @click=\"initFarmer\">\r\n          New Farmer\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, nextTick, onMounted, ref, watch } from 'vue';\r\nimport useWallet from '@/composables/wallet';\r\nimport useCluster from '@/composables/cluster';\r\nimport { initGemFarm } from '@/common/gem-farm';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport ConfigPane from '@/components/ConfigPane.vue';\r\nimport FarmerDisplay from '@/components/gem-farm/FarmerDisplay.vue';\r\nimport Vault from '@/components/gem-bank/Vault.vue';\r\nimport { INFT } from '@/common/web3/NFTget';\r\nimport { findFarmerPDA, stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\r\n\r\nexport default defineComponent({\r\n  components: { Vault, FarmerDisplay, ConfigPane },\r\n  setup() {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    let gf: any;\r\n    watch([wallet, cluster], async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    //needed in case we switch in from another window\r\n    onMounted(async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    // --------------------------------------- farmer details\r\n    const farm = ref<string>();\r\n    const farmAcc = ref<any>();\r\n\r\n    const farmerIdentity = ref<string>();\r\n    const farmerAcc = ref<any>();\r\n    const farmerState = ref<string>();\r\n\r\n    const availableA = ref<string>();\r\n    const availableB = ref<string>();\r\n\r\n    //auto loading for when farm changes\r\n    watch(farm, async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    const updateAvailableRewards = async () => {\r\n      availableA.value = farmerAcc.value.rewardA.accruedReward\r\n        .sub(farmerAcc.value.rewardA.paidOutReward)\r\n        .toString();\r\n      availableB.value = farmerAcc.value.rewardB.accruedReward\r\n        .sub(farmerAcc.value.rewardB.paidOutReward)\r\n        .toString();\r\n    };\r\n\r\n    const fetchFarn = async () => {\r\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\r\n      console.log(\r\n        `farm found at ${farm.value}:`,\r\n        stringifyPKsAndBNs(farmAcc.value)\r\n      );\r\n    };\r\n\r\n    const fetchFarmer = async () => {\r\n      const [farmerPDA] = await findFarmerPDA(\r\n        new PublicKey(farm.value!),\r\n        getWallet()!.publicKey!\r\n      );\r\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\r\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\r\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\r\n      await updateAvailableRewards();\r\n      console.log(\r\n        `farmer found at ${farmerIdentity.value}:`,\r\n        stringifyPKsAndBNs(farmerAcc.value)\r\n      );\r\n    };\r\n\r\n    const freshStart = async () => {\r\n      if (getWallet() && getConnection()) {\r\n        gf = await initGemFarm(getConnection(), getWallet()!);\r\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\r\n\r\n        //reset stuff\r\n        farmAcc.value = undefined;\r\n        farmerAcc.value = undefined;\r\n        farmerState.value = undefined;\r\n        availableA.value = undefined;\r\n        availableB.value = undefined;\r\n\r\n        try {\r\n          await fetchFarn();\r\n          await fetchFarmer();\r\n        } catch (e) {\r\n          console.log(`farm with PK ${farm.value} not found :(`);\r\n        }\r\n      }\r\n    };\r\n\r\n    const initFarmer = async () => {\r\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n    };\r\n\r\n    // --------------------------------------- staking\r\n    const beginStaking = async () => {\r\n      await gf.stakeWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n      selectedNFTs.value = [];\r\n    };\r\n\r\n    const endStaking = async () => {\r\n      await gf.unstakeWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n      selectedNFTs.value = [];\r\n    };\r\n\r\n    const claim = async () => {\r\n      await gf.claimWallet(\r\n        new PublicKey(farm.value!),\r\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\r\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\r\n      );\r\n      await fetchFarmer();\r\n    };\r\n\r\n    const handleRefreshFarmer = async () => {\r\n      await fetchFarmer();\r\n    };\r\n\r\n    // --------------------------------------- adding extra gem\r\n    const selectedNFTs = ref<INFT[]>([]);\r\n\r\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\r\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\r\n      selectedNFTs.value = newSelectedNFTs;\r\n    };\r\n\r\n    const addSingleGem = async (\r\n      gemMint: PublicKey,\r\n      gemSource: PublicKey,\r\n      creator: PublicKey\r\n    ) => {\r\n      await gf.flashDepositWallet(\r\n        new PublicKey(farm.value!),\r\n        '1',\r\n        gemMint,\r\n        gemSource,\r\n        creator\r\n      );\r\n      await fetchFarmer();\r\n    };\r\n\r\n    const addGems = async () => {\r\n      await Promise.all(\r\n        selectedNFTs.value.map((nft) => {\r\n          const creator = new PublicKey(\r\n            //todo currently simply taking the 1st creator\r\n            (nft.onchainMetadata as any).data.creators[0].address\r\n          );\r\n          console.log('creator is', creator.toBase58());\r\n\r\n          addSingleGem(nft.mint, nft.pubkey!, creator);\r\n        })\r\n      );\r\n      console.log(\r\n        `added another ${selectedNFTs.value.length} gems into staking vault`\r\n      );\r\n    };\r\n\r\n    return {\r\n      wallet,\r\n      farm,\r\n      farmAcc,\r\n      farmer: farmerIdentity,\r\n      farmerAcc,\r\n      farmerState,\r\n      availableA,\r\n      availableB,\r\n      initFarmer,\r\n      beginStaking,\r\n      endStaking,\r\n      claim,\r\n      handleRefreshFarmer,\r\n      selectedNFTs,\r\n      handleNewSelectedNFT,\r\n      addGems,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n"]}]}