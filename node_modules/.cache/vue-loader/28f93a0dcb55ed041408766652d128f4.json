{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue?vue&type=style&index=0&id=0ef0214d&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue","mtime":1650820970806},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\css-loader\\dist\\cjs.js","mtime":1650821115997},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1650821117514},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\postcss-loader\\src\\index.js","mtime":1650074884666},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoubG9ja2VkIHsNCiAgQGFwcGx5IHRleHQtY2VudGVyIGJnLWJsYWNrIHRleHQtd2hpdGU7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDEwMCU7DQogIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgdG9wOiAwOw0KICBsZWZ0OiAwOw0KICBvcGFjaXR5OiAwLjc7DQogIHotaW5kZXg6IDEwOw0KfQ0K"},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue"],"names":[],"mappings":";AAiTA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACN,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,CAAC,CAAC,EAAE,CAAC;EACN,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACb","file":"C:/Users/ferna/Desktop/HiddenStaking/gem-farm/app/gem-farm/src/components/gem-bank/Vault.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <!--control buttons-->\r\n  <div class=\"mb-10 flex justify-center\">\r\n    <button\r\n      v-if=\"\r\n        (toWalletNFTs && toWalletNFTs.length) ||\r\n        (toVaultNFTs && toVaultNFTs.length)\r\n      \"\r\n      class=\"nes-btn is-primary mr-5\"\r\n      @click=\"moveNFTsOnChain\"\r\n    >\r\n      Move Gems!\r\n    </button>\r\n    <slot />\r\n  </div>\r\n\r\n  <!--wallet + vault view-->\r\n  <div class=\"flex items-stretch\">\r\n    <!--left-->\r\n    <NFTGrid\r\n      title=\"Your wallet\"\r\n      class=\"flex-1\"\r\n      :nfts=\"desiredWalletNFTs\"\r\n      @selected=\"handleWalletSelected\"\r\n    />\r\n\r\n    <!--mid-->\r\n    <div class=\"m-2 flex flex-col\">\r\n      <ArrowButton\r\n        :disabled=\"vaultLocked\"\r\n        class=\"my-2\"\r\n        @click=\"moveNFTsFE(false)\"\r\n      />\r\n      <ArrowButton\r\n        :disabled=\"vaultLocked\"\r\n        class=\"my-2\"\r\n        :left=\"true\"\r\n        @click=\"moveNFTsFE(true)\"\r\n      />\r\n    </div>\r\n\r\n    <!--right-->\r\n    <NFTGrid\r\n      v-if=\"bank && vault\"\r\n      title=\"Your vault\"\r\n      class=\"flex-1\"\r\n      :nfts=\"desiredVaultNFTs\"\r\n      @selected=\"handleVaultSelected\"\r\n    >\r\n      <div\r\n        v-if=\"vaultLocked\"\r\n        class=\"locked flex-col justify-center items-center align-center\"\r\n      >\r\n        <p class=\"mt-10\">This vault is locked!</p>\r\n      </div>\r\n    </NFTGrid>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, onMounted, ref, watch } from 'vue';\r\nimport NFTGrid from '@/components/gem-bank/NFTGrid.vue';\r\nimport ArrowButton from '@/components/ArrowButton.vue';\r\nimport useWallet from '@/composables/wallet';\r\nimport useCluster from '@/composables/cluster';\r\nimport {\r\n  getNFTMetadataForMany,\r\n  getNFTsByOwner,\r\n  INFT,\r\n} from '@/common/web3/NFTget';\r\nimport { initGemBank } from '@/common/gem-bank';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { getListDiffBasedOnMints, removeManyFromList } from '@/common/util';\r\nimport { BN } from '@project-serum/anchor';\r\n\r\nexport default defineComponent({\r\n  components: { ArrowButton, NFTGrid },\r\n  props: {\r\n    vault: String,\r\n  },\r\n  emits: ['selected-wallet-nft'],\r\n  setup(props, ctx) {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    // --------------------------------------- state\r\n\r\n    //current walet/vault state\r\n    const currentWalletNFTs = ref<INFT[]>([]);\r\n    const currentVaultNFTs = ref<INFT[]>([]);\r\n    //selected but not yet moved over in FE\r\n    const selectedWalletNFTs = ref<INFT[]>([]);\r\n    const selectedVaultNFTs = ref<INFT[]>([]);\r\n    //moved over in FE but not yet onchain\r\n    const desiredWalletNFTs = ref<INFT[]>([]);\r\n    const desiredVaultNFTs = ref<INFT[]>([]);\r\n    //moved over onchain\r\n    const toWalletNFTs = ref<INFT[]>([]);\r\n    const toVaultNFTs = ref<INFT[]>([]);\r\n\r\n    // --------------------------------------- populate initial nfts\r\n\r\n    const populateWalletNFTs = async () => {\r\n      // zero out to begin with\r\n      currentWalletNFTs.value = [];\r\n      selectedWalletNFTs.value = [];\r\n      desiredWalletNFTs.value = [];\r\n\r\n      if (getWallet()) {\r\n        currentWalletNFTs.value = await getNFTsByOwner(\r\n          getWallet()!.publicKey!,\r\n          getConnection()\r\n        );\r\n        desiredWalletNFTs.value = [...currentWalletNFTs.value];\r\n      }\r\n    };\r\n\r\n    const populateVaultNFTs = async () => {\r\n      // zero out to begin with\r\n      currentVaultNFTs.value = [];\r\n      selectedVaultNFTs.value = [];\r\n      desiredVaultNFTs.value = [];\r\n\r\n      const foundGDRs = await gb.fetchAllGdrPDAs(vault.value);\r\n      if (foundGDRs && foundGDRs.length) {\r\n        gdrs.value = foundGDRs;\r\n        console.log(`found a total of ${foundGDRs.length} gdrs`);\r\n\r\n        const mints = foundGDRs.map((gdr: any) => {\r\n          return { mint: gdr.account.gemMint };\r\n        });\r\n        currentVaultNFTs.value = await getNFTMetadataForMany(\r\n          mints,\r\n          getConnection()\r\n        );\r\n        desiredVaultNFTs.value = [...currentVaultNFTs.value];\r\n        console.log(\r\n          `populated a total of ${currentVaultNFTs.value.length} vault NFTs`\r\n        );\r\n      }\r\n    };\r\n\r\n    const updateVaultState = async () => {\r\n      vaultAcc.value = await gb.fetchVaultAcc(vault.value);\r\n      bank.value = vaultAcc.value.bank;\r\n      vaultLocked.value = vaultAcc.value.locked;\r\n    };\r\n\r\n    watch([wallet, cluster], async () => {\r\n      gb = await initGemBank(getConnection(), getWallet()!);\r\n\r\n      //populate wallet + vault nfts\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    });\r\n\r\n    onMounted(async () => {\r\n      gb = await initGemBank(getConnection(), getWallet()!);\r\n\r\n      //prep vault + bank variables\r\n      vault.value = new PublicKey(props.vault!);\r\n      await updateVaultState();\r\n\r\n      //populate wallet + vault nfts\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    });\r\n\r\n    // --------------------------------------- moving nfts\r\n\r\n    const handleWalletSelected = (e: any) => {\r\n      if (e.selected) {\r\n        selectedWalletNFTs.value.push(e.nft);\r\n      } else {\r\n        const index = selectedWalletNFTs.value.indexOf(e.nft);\r\n        selectedWalletNFTs.value.splice(index, 1);\r\n      }\r\n      ctx.emit('selected-wallet-nft', selectedWalletNFTs.value);\r\n    };\r\n\r\n    const handleVaultSelected = (e: any) => {\r\n      if (e.selected) {\r\n        selectedVaultNFTs.value.push(e.nft);\r\n      } else {\r\n        const index = selectedVaultNFTs.value.indexOf(e.nft);\r\n        selectedVaultNFTs.value.splice(index, 1);\r\n      }\r\n    };\r\n\r\n    const moveNFTsFE = (moveLeft: boolean) => {\r\n      if (moveLeft) {\r\n        //push selected vault nfts into desired wallet\r\n        desiredWalletNFTs.value.push(...selectedVaultNFTs.value);\r\n        //remove selected vault nfts from desired vault\r\n        removeManyFromList(selectedVaultNFTs.value, desiredVaultNFTs.value);\r\n        //empty selection list\r\n        selectedVaultNFTs.value = [];\r\n      } else {\r\n        //push selected wallet nfts into desired vault\r\n        desiredVaultNFTs.value.push(...selectedWalletNFTs.value);\r\n        //remove selected wallet nfts from desired wallet\r\n        removeManyFromList(selectedWalletNFTs.value, desiredWalletNFTs.value);\r\n        //empty selected walelt\r\n        selectedWalletNFTs.value = [];\r\n      }\r\n    };\r\n\r\n    //todo jam into single tx\r\n    const moveNFTsOnChain = async () => {\r\n      for (const nft of toVaultNFTs.value) {\r\n        console.log(nft);\r\n        const creator = new PublicKey(\r\n          //todo currently simply taking the 1st creator\r\n          (nft.onchainMetadata as any).data.creators[0].address\r\n        );\r\n        console.log('creator is', creator.toBase58());\r\n        await depositGem(nft.mint, creator, nft.pubkey!);\r\n      }\r\n      for (const nft of toWalletNFTs.value) {\r\n        await withdrawGem(nft.mint);\r\n      }\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    };\r\n\r\n    //to vault = vault desired - vault current\r\n    watch(\r\n      desiredVaultNFTs,\r\n      () => {\r\n        toVaultNFTs.value = getListDiffBasedOnMints(\r\n          desiredVaultNFTs.value,\r\n          currentVaultNFTs.value\r\n        );\r\n        console.log('to vault nfts are', toVaultNFTs.value);\r\n      },\r\n      { deep: true }\r\n    );\r\n\r\n    //to wallet = wallet desired - wallet current\r\n    watch(\r\n      desiredWalletNFTs,\r\n      () => {\r\n        toWalletNFTs.value = getListDiffBasedOnMints(\r\n          desiredWalletNFTs.value,\r\n          currentWalletNFTs.value\r\n        );\r\n        console.log('to wallet nfts are', toWalletNFTs.value);\r\n      },\r\n      { deep: true }\r\n    );\r\n\r\n    // --------------------------------------- gem bank\r\n\r\n    let gb: any;\r\n    const bank = ref<PublicKey>();\r\n    const vault = ref<PublicKey>();\r\n    const vaultAcc = ref<any>();\r\n    const gdrs = ref<PublicKey[]>([]);\r\n    const vaultLocked = ref<boolean>(false);\r\n\r\n    const depositGem = async (\r\n      mint: PublicKey,\r\n      creator: PublicKey,\r\n      source: PublicKey\r\n    ) => {\r\n      const { txSig } = await gb.depositGemWallet(\r\n        bank.value,\r\n        vault.value,\r\n        new BN(1),\r\n        mint,\r\n        source,\r\n        creator\r\n      );\r\n      console.log('deposit done', txSig);\r\n    };\r\n\r\n    const withdrawGem = async (mint: PublicKey) => {\r\n      const { txSig } = await gb.withdrawGemWallet(\r\n        bank.value,\r\n        vault.value,\r\n        new BN(1),\r\n        mint\r\n      );\r\n      console.log('withdrawal done', txSig);\r\n    };\r\n\r\n    // --------------------------------------- return\r\n\r\n    return {\r\n      wallet,\r\n      desiredWalletNFTs,\r\n      desiredVaultNFTs,\r\n      toVaultNFTs,\r\n      toWalletNFTs,\r\n      handleWalletSelected,\r\n      handleVaultSelected,\r\n      moveNFTsFE,\r\n      moveNFTsOnChain,\r\n      bank,\r\n      // eslint-disable-next-line vue/no-dupe-keys\r\n      vault,\r\n      vaultLocked,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.locked {\r\n  @apply text-center bg-black text-white;\r\n  width: 100%;\r\n  height: 100%;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  opacity: 0.7;\r\n  z-index: 10;\r\n}\r\n</style>\r\n"]}]}