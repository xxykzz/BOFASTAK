{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue?vue&type=template&id=816cc700&ts=true","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue","mtime":1650820970809},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1650821117514},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9Im5lcy1jb250YWluZXIgd2l0aC10aXRsZSI+DQogICAgPHAgY2xhc3M9InRpdGxlIj5XaGl0ZWxpc3QgTWludHMgLyBDcmVhdG9yczwvcD4NCiAgICA8Zm9ybSBAc3VibWl0LnByZXZlbnQ9InVwZGF0ZVdoaXRlbGlzdCI+DQogICAgICA8bGFiZWw+DQogICAgICAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgY2xhc3M9Im5lcy1yYWRpbyIgdmFsdWU9ImFkZCIgdi1tb2RlbD0iYWN0aW9uIiAvPg0KICAgICAgICA8c3Bhbj5BZGQ8L3NwYW4+DQogICAgICA8L2xhYmVsPg0KICAgICAgPGxhYmVsPg0KICAgICAgICA8aW5wdXQgdHlwZT0icmFkaW8iIGNsYXNzPSJuZXMtcmFkaW8iIHZhbHVlPSJyZW1vdmUiIHYtbW9kZWw9ImFjdGlvbiIgLz4NCiAgICAgICAgPHNwYW4+UmVtb3ZlPC9zcGFuPg0KICAgICAgPC9sYWJlbD4NCg0KICAgICAgPGRpdiBjbGFzcz0ibmVzLWZpZWxkIGNsYXNzPW10LTUiPg0KICAgICAgICA8bGFiZWwgZm9yPSJhZGRyZXNzIj5BZGRyZXNzOjwvbGFiZWw+DQogICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iYWRkcmVzcyIgY2xhc3M9Im5lcy1pbnB1dCIgdi1tb2RlbD0iYWRkcmVzcyIgLz4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJtdC01Ij4NCiAgICAgICAgPGxhYmVsPg0KICAgICAgICAgIDxpbnB1dA0KICAgICAgICAgICAgdHlwZT0icmFkaW8iDQogICAgICAgICAgICBjbGFzcz0ibmVzLXJhZGlvIg0KICAgICAgICAgICAgOnZhbHVlPSJXaGl0ZWxpc3RUeXBlLkNyZWF0b3IiDQogICAgICAgICAgICB2LW1vZGVsPSJ0eXBlIg0KICAgICAgICAgIC8+DQogICAgICAgICAgPHNwYW4+Q3JlYXRvcjwvc3Bhbj4NCiAgICAgICAgPC9sYWJlbD4NCiAgICAgICAgPGxhYmVsPg0KICAgICAgICAgIDxpbnB1dA0KICAgICAgICAgICAgdHlwZT0icmFkaW8iDQogICAgICAgICAgICBjbGFzcz0ibmVzLXJhZGlvIg0KICAgICAgICAgICAgOnZhbHVlPSJXaGl0ZWxpc3RUeXBlLk1pbnQiDQogICAgICAgICAgICB2LW1vZGVsPSJ0eXBlIg0KICAgICAgICAgIC8+DQogICAgICAgICAgPHNwYW4+TWludDwvc3Bhbj4NCiAgICAgICAgPC9sYWJlbD4NCiAgICAgIDwvZGl2Pg0KDQogICAgICA8ZGl2IGNsYXNzPSJtdC0yIj4NCiAgICAgICAgPGJ1dHRvbiBjbGFzcz0ibmVzLWJ0biBpcy1wcmltYXJ5Ij5VcGRhdGU8L2J1dHRvbj4NCiAgICAgIDwvZGl2Pg0KICAgIDwvZm9ybT4NCg0KICAgIDxkaXYgY2xhc3M9Im10LTUiPg0KICAgICAgPGRpdiB2LWZvcj0icHJvb2YgaW4gcHJvb2ZzIiA6a2V5PSJwcm9vZi5hZGRyZXNzIj4NCiAgICAgICAge3sgcHJvb2YuYWNjb3VudC53aGl0ZWxpc3RlZEFkZHJlc3MudG9CYXNlNTgoKSB9fSAtDQogICAgICAgIHt7IHBhcnNlV2hpdGVsaXN0VHlwZShwcm9vZi5hY2NvdW50LndoaXRlbGlzdFR5cGUpIH19DQogICAgICA8L2Rpdj4NCiAgICA8L2Rpdj4NCiAgPC9kaXY+DQo="},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue"],"names":[],"mappings":"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","file":"C:/Users/ferna/Desktop/HiddenStaking/gem-farm/app/gem-farm/src/components/gem-farm/BankWhitelist.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"nes-container with-title\">\r\n    <p class=\"title\">Whitelist Mints / Creators</p>\r\n    <form @submit.prevent=\"updateWhitelist\">\r\n      <label>\r\n        <input type=\"radio\" class=\"nes-radio\" value=\"add\" v-model=\"action\" />\r\n        <span>Add</span>\r\n      </label>\r\n      <label>\r\n        <input type=\"radio\" class=\"nes-radio\" value=\"remove\" v-model=\"action\" />\r\n        <span>Remove</span>\r\n      </label>\r\n\r\n      <div class=\"nes-field class=mt-5\">\r\n        <label for=\"address\">Address:</label>\r\n        <input type=\"text\" id=\"address\" class=\"nes-input\" v-model=\"address\" />\r\n      </div>\r\n\r\n      <div class=\"mt-5\">\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            class=\"nes-radio\"\r\n            :value=\"WhitelistType.Creator\"\r\n            v-model=\"type\"\r\n          />\r\n          <span>Creator</span>\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            class=\"nes-radio\"\r\n            :value=\"WhitelistType.Mint\"\r\n            v-model=\"type\"\r\n          />\r\n          <span>Mint</span>\r\n        </label>\r\n      </div>\r\n\r\n      <div class=\"mt-2\">\r\n        <button class=\"nes-btn is-primary\">Update</button>\r\n      </div>\r\n    </form>\r\n\r\n    <div class=\"mt-5\">\r\n      <div v-for=\"proof in proofs\" :key=\"proof.address\">\r\n        {{ proof.account.whitelistedAddress.toBase58() }} -\r\n        {{ parseWhitelistType(proof.account.whitelistType) }}\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, onMounted, ref, watch } from 'vue';\r\nimport { WhitelistType } from '@gemworks/gem-farm-ts';\r\nimport useCluster from '@/composables/cluster';\r\nimport useWallet from '@/composables/wallet';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { initGemFarm } from '@/common/gem-farm';\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    farm: { type: String, required: true },\r\n    bank: { type: String, required: true },\r\n  },\r\n  setup(props, ctx) {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    let gf: any;\r\n    watch([wallet, cluster], async () => {\r\n      gf = await initGemFarm(getConnection(), getWallet()!);\r\n    });\r\n\r\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\r\n    onMounted(async () => {\r\n      if (getWallet() && getConnection()) {\r\n        gf = await initGemFarm(getConnection(), getWallet()!);\r\n      }\r\n      await fetchProofs();\r\n    });\r\n\r\n    // --------------------------------------- whitelist\r\n    const action = ref<string>('add');\r\n    const address = ref<string>();\r\n    const type = ref<WhitelistType>(WhitelistType.Creator);\r\n    const proofs = ref<PublicKey[]>([]);\r\n\r\n    const fetchProofs = async () => {\r\n      proofs.value = await gf.fetchAllWhitelistProofPDAs(\r\n        new PublicKey(props.bank)\r\n      );\r\n    };\r\n\r\n    const updateWhitelist = async () => {\r\n      if (action.value === 'add') {\r\n        await gf.addToBankWhitelistWallet(\r\n          new PublicKey(props.farm),\r\n          new PublicKey(address.value!),\r\n          type.value\r\n        );\r\n        await fetchProofs();\r\n      } else {\r\n        await gf.removeFromBankWhitelistWallet(\r\n          new PublicKey(props.farm),\r\n          new PublicKey(address.value!)\r\n        );\r\n        await fetchProofs();\r\n      }\r\n    };\r\n\r\n    const parseWhitelistType = (numType: number) => {\r\n      switch (numType) {\r\n        case 1:\r\n          return 'Creator';\r\n        case 2:\r\n          return 'Mint';\r\n        case 3:\r\n          return 'Mint + Whitelist';\r\n        default:\r\n          return 'unknown';\r\n      }\r\n    };\r\n\r\n    return {\r\n      WhitelistType,\r\n      action,\r\n      address,\r\n      type,\r\n      proofs,\r\n      updateWhitelist,\r\n      parseWhitelistType,\r\n    };\r\n  },\r\n});\r\n</script>\r\n\r\n<style scoped></style>\r\n"]}]}