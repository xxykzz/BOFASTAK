{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\web3\\NFTget.ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\web3\\NFTget.ts","mtime":1650820970797},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcZmVybmFcXERlc2t0b3BcXEhpZGRlblN0YWtpbmdcXGdlbS1mYXJtXFxhcHBcXGdlbS1mYXJtXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgeyBQdWJsaWNLZXkgfSBmcm9tICdAc29sYW5hL3dlYjMuanMnOwppbXBvcnQgeyBUT0tFTl9QUk9HUkFNX0lEIH0gZnJvbSAnQHNvbGFuYS9zcGwtdG9rZW4nOwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwppbXBvcnQgeyBwcm9ncmFtcyB9IGZyb20gJ0BtZXRhcGxleC9qcyc7CnZhciBNZXRhZGF0YSA9IHByb2dyYW1zLm1ldGFkYXRhLk1ldGFkYXRhOwoKZnVuY3Rpb24gZ2V0VG9rZW5zQnlPd25lcihfeCwgX3gyKSB7CiAgcmV0dXJuIF9nZXRUb2tlbnNCeU93bmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmZ1bmN0aW9uIF9nZXRUb2tlbnNCeU93bmVyKCkgewogIF9nZXRUb2tlbnNCeU93bmVyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKG93bmVyLCBjb25uKSB7CiAgICB2YXIgdG9rZW5zOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGNvbm4uZ2V0UGFyc2VkVG9rZW5BY2NvdW50c0J5T3duZXIob3duZXIsIHsKICAgICAgICAgICAgICBwcm9ncmFtSWQ6IFRPS0VOX1BST0dSQU1fSUQKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICB0b2tlbnMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0b2tlbnMudmFsdWUuZmlsdGVyKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgdmFyIGFtb3VudCA9IHQuYWNjb3VudC5kYXRhLnBhcnNlZC5pbmZvLnRva2VuQW1vdW50OwogICAgICAgICAgICAgIHJldHVybiBhbW91bnQuZGVjaW1hbHMgPT09IDAgJiYgYW1vdW50LnVpQW1vdW50ID09PSAxOwogICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcHVia2V5OiB0LnB1YmtleSwKICAgICAgICAgICAgICAgIG1pbnQ6IHQuYWNjb3VudC5kYXRhLnBhcnNlZC5pbmZvLm1pbnQKICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9KSk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUpOwogIH0pKTsKICByZXR1cm4gX2dldFRva2Vuc0J5T3duZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gZ2V0TkZUTWV0YWRhdGEoX3gzLCBfeDQsIF94NSkgewogIHJldHVybiBfZ2V0TkZUTWV0YWRhdGEuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2dldE5GVE1ldGFkYXRhKCkgewogIF9nZXRORlRNZXRhZGF0YSA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIobWludCwgY29ubiwgcHVia2V5KSB7CiAgICB2YXIgbWV0YWRhdGFQREEsIG9uY2hhaW5NZXRhZGF0YSwgZXh0ZXJuYWxNZXRhZGF0YTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0Mi5wcmV2ID0gMDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICByZXR1cm4gTWV0YWRhdGEuZ2V0UERBKG1pbnQpOwoKICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgbWV0YWRhdGFQREEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gTWV0YWRhdGEubG9hZChjb25uLCBtZXRhZGF0YVBEQSk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBvbmNoYWluTWV0YWRhdGEgPSBfY29udGV4dDIuc2VudC5kYXRhOwogICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQob25jaGFpbk1ldGFkYXRhLmRhdGEudXJpKTsKCiAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgIGV4dGVybmFsTWV0YWRhdGEgPSBfY29udGV4dDIuc2VudC5kYXRhOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgIHB1YmtleTogcHVia2V5ID8gbmV3IFB1YmxpY0tleShwdWJrZXkpIDogdW5kZWZpbmVkLAogICAgICAgICAgICAgIG1pbnQ6IG5ldyBQdWJsaWNLZXkobWludCksCiAgICAgICAgICAgICAgb25jaGFpbk1ldGFkYXRhOiBvbmNoYWluTWV0YWRhdGEsCiAgICAgICAgICAgICAgZXh0ZXJuYWxNZXRhZGF0YTogZXh0ZXJuYWxNZXRhZGF0YQogICAgICAgICAgICB9KTsKCiAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICBfY29udGV4dDIucHJldiA9IDEzOwogICAgICAgICAgICBfY29udGV4dDIudDAgPSBfY29udGV4dDJbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmYWlsZWQgdG8gcHVsbCBtZXRhZGF0YSBmb3IgdG9rZW4gIi5jb25jYXQobWludCkpOwoKICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUyLCBudWxsLCBbWzAsIDEzXV0pOwogIH0pKTsKICByZXR1cm4gX2dldE5GVE1ldGFkYXRhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRORlRNZXRhZGF0YUZvck1hbnkoX3g2LCBfeDcpIHsKICByZXR1cm4gX2dldE5GVE1ldGFkYXRhRm9yTWFueS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0TkZUTWV0YWRhdGFGb3JNYW55KCkgewogIF9nZXRORlRNZXRhZGF0YUZvck1hbnkgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKHRva2VucywgY29ubikgewogICAgdmFyIHByb21pc2VzLCBuZnRzOwogICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgcHJvbWlzZXMgPSBbXTsKICAgICAgICAgICAgdG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICByZXR1cm4gcHJvbWlzZXMucHVzaChnZXRORlRNZXRhZGF0YSh0Lm1pbnQsIGNvbm4sIHQucHVia2V5KSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDQ7CiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7CgogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBuZnRzID0gX2NvbnRleHQzLnNlbnQuZmlsdGVyKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICAgICAgcmV0dXJuICEhbjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmb3VuZCAiLmNvbmNhdChuZnRzLmxlbmd0aCwgIiBtZXRhZGF0YXMiKSk7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBuZnRzKTsKCiAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzKTsKICB9KSk7CiAgcmV0dXJuIF9nZXRORlRNZXRhZGF0YUZvck1hbnkuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldE5GVHNCeU93bmVyKF94OCwgX3g5KSB7CiAgcmV0dXJuIF9nZXRORlRzQnlPd25lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CgpmdW5jdGlvbiBfZ2V0TkZUc0J5T3duZXIoKSB7CiAgX2dldE5GVHNCeU93bmVyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNChvd25lciwgY29ubikgewogICAgdmFyIHRva2VuczsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMjsKICAgICAgICAgICAgcmV0dXJuIGdldFRva2Vuc0J5T3duZXIob3duZXIsIGNvbm4pOwoKICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgdG9rZW5zID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJmb3VuZCAiLmNvbmNhdCh0b2tlbnMubGVuZ3RoLCAiIHRva2VucyIpKTsKICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA2OwogICAgICAgICAgICByZXR1cm4gZ2V0TkZUTWV0YWRhdGFGb3JNYW55KHRva2VucywgY29ubik7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ0LnNlbnQpOwoKICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZTQpOwogIH0pKTsKICByZXR1cm4gX2dldE5GVHNCeU93bmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\web3\\NFTget.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, PublicKey } from '@solana/web3.js';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport axios from 'axios';\r\nimport { programs } from '@metaplex/js';\r\n\r\nconst {\r\n  metadata: { Metadata },\r\n} = programs;\r\n\r\nexport interface INFT {\r\n  pubkey?: PublicKey;\r\n  mint: PublicKey;\r\n  onchainMetadata: unknown;\r\n  externalMetadata: unknown;\r\n}\r\n\r\nasync function getTokensByOwner(owner: PublicKey, conn: Connection) {\r\n  const tokens = await conn.getParsedTokenAccountsByOwner(owner, {\r\n    programId: TOKEN_PROGRAM_ID,\r\n  });\r\n\r\n  // initial filter - only tokens with 0 decimals & of which 1 is present in the wallet\r\n  return tokens.value\r\n    .filter((t) => {\r\n      const amount = t.account.data.parsed.info.tokenAmount;\r\n      return amount.decimals === 0 && amount.uiAmount === 1;\r\n    })\r\n    .map((t) => {\r\n      return { pubkey: t.pubkey, mint: t.account.data.parsed.info.mint };\r\n    });\r\n}\r\n\r\nasync function getNFTMetadata(\r\n  mint: string,\r\n  conn: Connection,\r\n  pubkey?: string\r\n): Promise<INFT | undefined> {\r\n  // console.log('Pulling metadata for:', mint);\r\n  try {\r\n    const metadataPDA = await Metadata.getPDA(mint);\r\n    const onchainMetadata = (await Metadata.load(conn, metadataPDA)).data;\r\n    const externalMetadata = (await axios.get(onchainMetadata.data.uri)).data;\r\n    return {\r\n      pubkey: pubkey ? new PublicKey(pubkey) : undefined,\r\n      mint: new PublicKey(mint),\r\n      onchainMetadata,\r\n      externalMetadata,\r\n    };\r\n  } catch (e) {\r\n    console.log(`failed to pull metadata for token ${mint}`);\r\n  }\r\n}\r\n\r\nexport async function getNFTMetadataForMany(\r\n  tokens: any[],\r\n  conn: Connection\r\n): Promise<INFT[]> {\r\n  const promises: Promise<INFT | undefined>[] = [];\r\n  tokens.forEach((t) => promises.push(getNFTMetadata(t.mint, conn, t.pubkey)));\r\n  const nfts = (await Promise.all(promises)).filter((n) => !!n);\r\n  console.log(`found ${nfts.length} metadatas`);\r\n\r\n  return nfts as INFT[];\r\n}\r\n\r\nexport async function getNFTsByOwner(\r\n  owner: PublicKey,\r\n  conn: Connection\r\n): Promise<INFT[]> {\r\n  const tokens = await getTokensByOwner(owner, conn);\r\n  console.log(`found ${tokens.length} tokens`);\r\n\r\n  return await getNFTMetadataForMany(tokens, conn);\r\n}\r\n"],"sourceRoot":""}]}