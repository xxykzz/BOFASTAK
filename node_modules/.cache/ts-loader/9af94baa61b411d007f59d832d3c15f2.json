{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue?vue&type=script&lang=ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue","mtime":1650820970809},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcZmVybmFcXERlc2t0b3BcXEhpZGRlblN0YWtpbmdcXGdlbS1mYXJtXFxhcHBcXGdlbS1mYXJtXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IFdoaXRlbGlzdFR5cGUgfSBmcm9tICdAZ2Vtd29ya3MvZ2VtLWZhcm0tdHMnOwppbXBvcnQgdXNlQ2x1c3RlciBmcm9tICdAL2NvbXBvc2FibGVzL2NsdXN0ZXInOwppbXBvcnQgdXNlV2FsbGV0IGZyb20gJ0AvY29tcG9zYWJsZXMvd2FsbGV0JzsKaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJzsKaW1wb3J0IHsgaW5pdEdlbUZhcm0gfSBmcm9tICdAL2NvbW1vbi9nZW0tZmFybSc7CmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7CiAgcHJvcHM6IHsKICAgIGZhcm06IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGJhbms6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfQogIH0sCiAgc2V0dXA6IGZ1bmN0aW9uIHNldHVwKHByb3BzLCBjdHgpIHsKICAgIHZhciBfdXNlV2FsbGV0ID0gdXNlV2FsbGV0KCksCiAgICAgICAgd2FsbGV0ID0gX3VzZVdhbGxldC53YWxsZXQsCiAgICAgICAgZ2V0V2FsbGV0ID0gX3VzZVdhbGxldC5nZXRXYWxsZXQ7CgogICAgdmFyIF91c2VDbHVzdGVyID0gdXNlQ2x1c3RlcigpLAogICAgICAgIGNsdXN0ZXIgPSBfdXNlQ2x1c3Rlci5jbHVzdGVyLAogICAgICAgIGdldENvbm5lY3Rpb24gPSBfdXNlQ2x1c3Rlci5nZXRDb25uZWN0aW9uOwoKICAgIHZhciBnZjsKICAgIHdhdGNoKFt3YWxsZXQsIGNsdXN0ZXJdLCAvKiNfX1BVUkVfXyovX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGluaXRHZW1GYXJtKGdldENvbm5lY3Rpb24oKSwgZ2V0V2FsbGV0KCkpOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIGdmID0gX2NvbnRleHQuc2VudDsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkpOyAvL25lZWQgYW4gb25tb3VudGVkIGhvb2sgYmVjYXVzZSB0aGlzIGNvbXBvbmVudCBpc24ndCB5ZXQgbW91bnRlZCB3aGVuIHdhbGxldC9jbHVzdGVyIGFyZSBzZXQKCiAgICBvbk1vdW50ZWQoIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlmICghKGdldFdhbGxldCgpICYmIGdldENvbm5lY3Rpb24oKSkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBpbml0R2VtRmFybShnZXRDb25uZWN0aW9uKCksIGdldFdhbGxldCgpKTsKCiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBnZiA9IF9jb250ZXh0Mi5zZW50OwoKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2hQcm9vZnMoKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSk7IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB3aGl0ZWxpc3QKCiAgICB2YXIgYWN0aW9uID0gcmVmKCdhZGQnKTsKICAgIHZhciBhZGRyZXNzID0gcmVmKCk7CiAgICB2YXIgdHlwZSA9IHJlZihXaGl0ZWxpc3RUeXBlLkNyZWF0b3IpOwogICAgdmFyIHByb29mcyA9IHJlZihbXSk7CgogICAgdmFyIGZldGNoUHJvb2ZzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWYzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIGdmLmZldGNoQWxsV2hpdGVsaXN0UHJvb2ZQREFzKG5ldyBQdWJsaWNLZXkocHJvcHMuYmFuaykpOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBwcm9vZnMudmFsdWUgPSBfY29udGV4dDMuc2VudDsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIGZldGNoUHJvb2ZzKCkgewogICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIHZhciB1cGRhdGVXaGl0ZWxpc3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlNCQoX2NvbnRleHQ0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIShhY3Rpb24udmFsdWUgPT09ICdhZGQnKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDc7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBnZi5hZGRUb0JhbmtXaGl0ZWxpc3RXYWxsZXQobmV3IFB1YmxpY0tleShwcm9wcy5mYXJtKSwgbmV3IFB1YmxpY0tleShhZGRyZXNzLnZhbHVlKSwgdHlwZS52YWx1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaFByb29mcygpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIHJldHVybiBnZi5yZW1vdmVGcm9tQmFua1doaXRlbGlzdFdhbGxldChuZXcgUHVibGljS2V5KHByb3BzLmZhcm0pLCBuZXcgUHVibGljS2V5KGFkZHJlc3MudmFsdWUpKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaFByb29mcygpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU0KTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVdoaXRlbGlzdCgpIHsKICAgICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfTsKICAgIH0oKTsKCiAgICB2YXIgcGFyc2VXaGl0ZWxpc3RUeXBlID0gZnVuY3Rpb24gcGFyc2VXaGl0ZWxpc3RUeXBlKG51bVR5cGUpIHsKICAgICAgc3dpdGNoIChudW1UeXBlKSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgcmV0dXJuICdDcmVhdG9yJzsKCiAgICAgICAgY2FzZSAyOgogICAgICAgICAgcmV0dXJuICdNaW50JzsKCiAgICAgICAgY2FzZSAzOgogICAgICAgICAgcmV0dXJuICdNaW50ICsgV2hpdGVsaXN0JzsKCiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHJldHVybiAndW5rbm93bic7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIHsKICAgICAgV2hpdGVsaXN0VHlwZTogV2hpdGVsaXN0VHlwZSwKICAgICAgYWN0aW9uOiBhY3Rpb24sCiAgICAgIGFkZHJlc3M6IGFkZHJlc3MsCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHByb29mczogcHJvb2ZzLAogICAgICB1cGRhdGVXaGl0ZWxpc3Q6IHVwZGF0ZVdoaXRlbGlzdCwKICAgICAgcGFyc2VXaGl0ZWxpc3RUeXBlOiBwYXJzZVdoaXRlbGlzdFR5cGUKICAgIH07CiAgfQp9KTs="},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\BankWhitelist.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { defineComponent, onMounted, ref, watch } from 'vue';\r\nimport { WhitelistType } from '@gemworks/gem-farm-ts';\r\nimport useCluster from '@/composables/cluster';\r\nimport useWallet from '@/composables/wallet';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { initGemFarm } from '@/common/gem-farm';\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    farm: { type: String, required: true },\r\n    bank: { type: String, required: true },\r\n  },\r\n  setup(props, ctx) {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    let gf: any;\r\n    watch([wallet, cluster], async () => {\r\n      gf = await initGemFarm(getConnection(), getWallet()!);\r\n    });\r\n\r\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\r\n    onMounted(async () => {\r\n      if (getWallet() && getConnection()) {\r\n        gf = await initGemFarm(getConnection(), getWallet()!);\r\n      }\r\n      await fetchProofs();\r\n    });\r\n\r\n    // --------------------------------------- whitelist\r\n    const action = ref<string>('add');\r\n    const address = ref<string>();\r\n    const type = ref<WhitelistType>(WhitelistType.Creator);\r\n    const proofs = ref<PublicKey[]>([]);\r\n\r\n    const fetchProofs = async () => {\r\n      proofs.value = await gf.fetchAllWhitelistProofPDAs(\r\n        new PublicKey(props.bank)\r\n      );\r\n    };\r\n\r\n    const updateWhitelist = async () => {\r\n      if (action.value === 'add') {\r\n        await gf.addToBankWhitelistWallet(\r\n          new PublicKey(props.farm),\r\n          new PublicKey(address.value!),\r\n          type.value\r\n        );\r\n        await fetchProofs();\r\n      } else {\r\n        await gf.removeFromBankWhitelistWallet(\r\n          new PublicKey(props.farm),\r\n          new PublicKey(address.value!)\r\n        );\r\n        await fetchProofs();\r\n      }\r\n    };\r\n\r\n    const parseWhitelistType = (numType: number) => {\r\n      switch (numType) {\r\n        case 1:\r\n          return 'Creator';\r\n        case 2:\r\n          return 'Mint';\r\n        case 3:\r\n          return 'Mint + Whitelist';\r\n        default:\r\n          return 'unknown';\r\n      }\r\n    };\r\n\r\n    return {\r\n      WhitelistType,\r\n      action,\r\n      address,\r\n      type,\r\n      proofs,\r\n      updateWhitelist,\r\n      parseWhitelistType,\r\n    };\r\n  },\r\n});\r\n"],"sourceRoot":""}]}