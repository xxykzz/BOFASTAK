{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue?vue&type=script&lang=ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue","mtime":1650820970834},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\views\\Farmer.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { defineComponent, nextTick, onMounted, ref, watch } from 'vue';\r\nimport useWallet from '@/composables/wallet';\r\nimport useCluster from '@/composables/cluster';\r\nimport { initGemFarm } from '@/common/gem-farm';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport ConfigPane from '@/components/ConfigPane.vue';\r\nimport FarmerDisplay from '@/components/gem-farm/FarmerDisplay.vue';\r\nimport Vault from '@/components/gem-bank/Vault.vue';\r\nimport { INFT } from '@/common/web3/NFTget';\r\nimport { findFarmerPDA, stringifyPKsAndBNs } from '@gemworks/gem-farm-ts';\r\n\r\nexport default defineComponent({\r\n  components: { Vault, FarmerDisplay, ConfigPane },\r\n  setup() {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    let gf: any;\r\n    watch([wallet, cluster], async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    //needed in case we switch in from another window\r\n    onMounted(async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    // --------------------------------------- farmer details\r\n    const farm = ref<string>();\r\n    const farmAcc = ref<any>();\r\n\r\n    const farmerIdentity = ref<string>();\r\n    const farmerAcc = ref<any>();\r\n    const farmerState = ref<string>();\r\n\r\n    const availableA = ref<string>();\r\n    const availableB = ref<string>();\r\n\r\n    //auto loading for when farm changes\r\n    watch(farm, async () => {\r\n      await freshStart();\r\n    });\r\n\r\n    const updateAvailableRewards = async () => {\r\n      availableA.value = farmerAcc.value.rewardA.accruedReward\r\n        .sub(farmerAcc.value.rewardA.paidOutReward)\r\n        .toString();\r\n      availableB.value = farmerAcc.value.rewardB.accruedReward\r\n        .sub(farmerAcc.value.rewardB.paidOutReward)\r\n        .toString();\r\n    };\r\n\r\n    const fetchFarn = async () => {\r\n      farmAcc.value = await gf.fetchFarmAcc(new PublicKey(farm.value!));\r\n      console.log(\r\n        `farm found at ${farm.value}:`,\r\n        stringifyPKsAndBNs(farmAcc.value)\r\n      );\r\n    };\r\n\r\n    const fetchFarmer = async () => {\r\n      const [farmerPDA] = await findFarmerPDA(\r\n        new PublicKey(farm.value!),\r\n        getWallet()!.publicKey!\r\n      );\r\n      farmerIdentity.value = getWallet()!.publicKey?.toBase58();\r\n      farmerAcc.value = await gf.fetchFarmerAcc(farmerPDA);\r\n      farmerState.value = gf.parseFarmerState(farmerAcc.value);\r\n      await updateAvailableRewards();\r\n      console.log(\r\n        `farmer found at ${farmerIdentity.value}:`,\r\n        stringifyPKsAndBNs(farmerAcc.value)\r\n      );\r\n    };\r\n\r\n    const freshStart = async () => {\r\n      if (getWallet() && getConnection()) {\r\n        gf = await initGemFarm(getConnection(), getWallet()!);\r\n        farmerIdentity.value = getWallet()!.publicKey?.toBase58();\r\n\r\n        //reset stuff\r\n        farmAcc.value = undefined;\r\n        farmerAcc.value = undefined;\r\n        farmerState.value = undefined;\r\n        availableA.value = undefined;\r\n        availableB.value = undefined;\r\n\r\n        try {\r\n          await fetchFarn();\r\n          await fetchFarmer();\r\n        } catch (e) {\r\n          console.log(`farm with PK ${farm.value} not found :(`);\r\n        }\r\n      }\r\n    };\r\n\r\n    const initFarmer = async () => {\r\n      await gf.initFarmerWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n    };\r\n\r\n    // --------------------------------------- staking\r\n    const beginStaking = async () => {\r\n      await gf.stakeWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n      selectedNFTs.value = [];\r\n    };\r\n\r\n    const endStaking = async () => {\r\n      await gf.unstakeWallet(new PublicKey(farm.value!));\r\n      await fetchFarmer();\r\n      selectedNFTs.value = [];\r\n    };\r\n\r\n    const claim = async () => {\r\n      await gf.claimWallet(\r\n        new PublicKey(farm.value!),\r\n        new PublicKey(farmAcc.value.rewardA.rewardMint!),\r\n        new PublicKey(farmAcc.value.rewardB.rewardMint!)\r\n      );\r\n      await fetchFarmer();\r\n    };\r\n\r\n    const handleRefreshFarmer = async () => {\r\n      await fetchFarmer();\r\n    };\r\n\r\n    // --------------------------------------- adding extra gem\r\n    const selectedNFTs = ref<INFT[]>([]);\r\n\r\n    const handleNewSelectedNFT = (newSelectedNFTs: INFT[]) => {\r\n      console.log(`selected ${newSelectedNFTs.length} NFTs`);\r\n      selectedNFTs.value = newSelectedNFTs;\r\n    };\r\n\r\n    const addSingleGem = async (\r\n      gemMint: PublicKey,\r\n      gemSource: PublicKey,\r\n      creator: PublicKey\r\n    ) => {\r\n      await gf.flashDepositWallet(\r\n        new PublicKey(farm.value!),\r\n        '1',\r\n        gemMint,\r\n        gemSource,\r\n        creator\r\n      );\r\n      await fetchFarmer();\r\n    };\r\n\r\n    const addGems = async () => {\r\n      await Promise.all(\r\n        selectedNFTs.value.map((nft) => {\r\n          const creator = new PublicKey(\r\n            //todo currently simply taking the 1st creator\r\n            (nft.onchainMetadata as any).data.creators[0].address\r\n          );\r\n          console.log('creator is', creator.toBase58());\r\n\r\n          addSingleGem(nft.mint, nft.pubkey!, creator);\r\n        })\r\n      );\r\n      console.log(\r\n        `added another ${selectedNFTs.value.length} gems into staking vault`\r\n      );\r\n    };\r\n\r\n    return {\r\n      wallet,\r\n      farm,\r\n      farmAcc,\r\n      farmer: farmerIdentity,\r\n      farmerAcc,\r\n      farmerState,\r\n      availableA,\r\n      availableB,\r\n      initFarmer,\r\n      beginStaking,\r\n      endStaking,\r\n      claim,\r\n      handleRefreshFarmer,\r\n      selectedNFTs,\r\n      handleNewSelectedNFT,\r\n      addGems,\r\n    };\r\n  },\r\n});\r\n"],"sourceRoot":""}]}