{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\RefreshFarmer.vue?vue&type=script&lang=ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\RefreshFarmer.vue","mtime":1650820970816},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkM6XFxVc2Vyc1xcZmVybmFcXERlc2t0b3BcXEhpZGRlblN0YWtpbmdcXGdlbS1mYXJtXFxhcHBcXGdlbS1mYXJtXFxub2RlX21vZHVsZXNcXEBiYWJlbFxccnVudGltZVxcaGVscGVyc1xcZXNtXFxhc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwppbXBvcnQgeyBkZWZpbmVDb21wb25lbnQsIG9uTW91bnRlZCwgcmVmLCB3YXRjaCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB1c2VXYWxsZXQgZnJvbSAnQC9jb21wb3NhYmxlcy93YWxsZXQnOwppbXBvcnQgdXNlQ2x1c3RlciBmcm9tICdAL2NvbXBvc2FibGVzL2NsdXN0ZXInOwppbXBvcnQgeyBpbml0R2VtRmFybSB9IGZyb20gJ0AvY29tbW9uL2dlbS1mYXJtJzsKaW1wb3J0IHsgUHVibGljS2V5IH0gZnJvbSAnQHNvbGFuYS93ZWIzLmpzJzsKZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHsKICBwcm9wczogewogICAgZmFybTogU3RyaW5nCiAgfSwKICBzZXR1cDogZnVuY3Rpb24gc2V0dXAocHJvcHMsIGN0eCkgewogICAgdmFyIF91c2VXYWxsZXQgPSB1c2VXYWxsZXQoKSwKICAgICAgICB3YWxsZXQgPSBfdXNlV2FsbGV0LndhbGxldCwKICAgICAgICBnZXRXYWxsZXQgPSBfdXNlV2FsbGV0LmdldFdhbGxldDsKCiAgICB2YXIgX3VzZUNsdXN0ZXIgPSB1c2VDbHVzdGVyKCksCiAgICAgICAgY2x1c3RlciA9IF91c2VDbHVzdGVyLmNsdXN0ZXIsCiAgICAgICAgZ2V0Q29ubmVjdGlvbiA9IF91c2VDbHVzdGVyLmdldENvbm5lY3Rpb247CgogICAgdmFyIGdmOwogICAgd2F0Y2goW3dhbGxldCwgY2x1c3Rlcl0sIC8qI19fUFVSRV9fKi9fYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gaW5pdEdlbUZhcm0oZ2V0Q29ubmVjdGlvbigpLCBnZXRXYWxsZXQoKSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgZ2YgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSk7IC8vbmVlZCBhbiBvbm1vdW50ZWQgaG9vayBiZWNhdXNlIHRoaXMgY29tcG9uZW50IGlzbid0IHlldCBtb3VudGVkIHdoZW4gd2FsbGV0L2NsdXN0ZXIgYXJlIHNldAoKICAgIG9uTW91bnRlZCggLyojX19QVVJFX18qL19hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgaWYgKCEoZ2V0V2FsbGV0KCkgJiYgZ2V0Q29ubmVjdGlvbigpKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIGluaXRHZW1GYXJtKGdldENvbm5lY3Rpb24oKSwgZ2V0V2FsbGV0KCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGdmID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkpOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gcmVmcmVzaCBmYXJtZXIKCiAgICB2YXIgZmFybWVyID0gcmVmKCk7CgogICAgdmFyIHJlZnJlc2hGYXJtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKCkgewogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmFicnVwdCgicmV0dXJuIiwgZ2YucmVmcmVzaEZhcm1lcldhbGxldChuZXcgUHVibGljS2V5KHByb3BzLmZhcm0pLCBuZXcgUHVibGljS2V5KGZhcm1lci52YWx1ZSkpKTsKCiAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwoKICAgICAgcmV0dXJuIGZ1bmN0aW9uIHJlZnJlc2hGYXJtZXIoKSB7CiAgICAgICAgcmV0dXJuIF9yZWYzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH07CiAgICB9KCk7CgogICAgcmV0dXJuIHsKICAgICAgZmFybWVyOiBmYXJtZXIsCiAgICAgIHJlZnJlc2hGYXJtZXI6IHJlZnJlc2hGYXJtZXIKICAgIH07CiAgfQp9KTs="},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-farm\\RefreshFarmer.vue?vue&type=script&lang=ts"],"names":[],"mappings":";;AACA,SAAS,eAAT,EAA0B,SAA1B,EAAqC,GAArC,EAA0C,KAA1C,QAAuD,KAAvD;AACA,OAAO,SAAP,MAAsB,sBAAtB;AACA,OAAO,UAAP,MAAuB,uBAAvB;AACA,SAAS,WAAT,QAA4B,mBAA5B;AACA,SAAS,SAAT,QAA0B,iBAA1B;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,KAAK,EAAE;AACL,IAAA,IAAI,EAAE;AADD,GADsB;AAI7B,EAAA,KAJ6B,iBAIvB,KAJuB,EAIhB,GAJgB,EAIb;AACd,qBAA8B,SAAS,EAAvC;AAAA,QAAQ,MAAR,cAAQ,MAAR;AAAA,QAAgB,SAAhB,cAAgB,SAAhB;;AACA,sBAAmC,UAAU,EAA7C;AAAA,QAAQ,OAAR,eAAQ,OAAR;AAAA,QAAiB,aAAjB,eAAiB,aAAjB;;AAEA,QAAI,EAAJ;AACA,IAAA,KAAK,CAAC,CAAC,MAAD,EAAS,OAAT,CAAD,uEAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACZ,WAAW,CAAC,aAAa,EAAd,EAAkB,SAAS,EAA3B,CADC;;AAAA;AACvB,cAAA,EADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB,GAAL,CALc,CASd;;AACA,IAAA,SAAS,uEAAC;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJ,SAAS,MAAM,aAAa,EADxB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAEK,WAAW,CAAC,aAAa,EAAd,EAAkB,SAAS,EAA3B,CAFhB;;AAAA;AAEN,cAAA,EAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD,GAAT,CAVc,CAgBd;;AACA,QAAM,MAAM,GAAG,GAAG,EAAlB;;AAEA,QAAM,aAAa;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA,kDACb,EAAE,CAAC,mBAAH,CACL,IAAI,SAAJ,CAAc,KAAK,CAAC,IAApB,CADK,EAEL,IAAI,SAAJ,CAAc,MAAM,CAAC,KAArB,CAFK,CADa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAb,aAAa;AAAA;AAAA;AAAA,OAAnB;;AAOA,WAAO;AACL,MAAA,MAAM,EAAN,MADK;AAEL,MAAA,aAAa,EAAb;AAFK,KAAP;AAID;AAlC4B,CAAD,CAA9B","sourcesContent":["\r\nimport { defineComponent, onMounted, ref, watch } from 'vue';\r\nimport useWallet from '@/composables/wallet';\r\nimport useCluster from '@/composables/cluster';\r\nimport { initGemFarm } from '@/common/gem-farm';\r\nimport { PublicKey } from '@solana/web3.js';\r\n\r\nexport default defineComponent({\r\n  props: {\r\n    farm: String,\r\n  },\r\n  setup(props, ctx) {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    let gf: any;\r\n    watch([wallet, cluster], async () => {\r\n      gf = await initGemFarm(getConnection(), getWallet()!);\r\n    });\r\n\r\n    //need an onmounted hook because this component isn't yet mounted when wallet/cluster are set\r\n    onMounted(async () => {\r\n      if (getWallet() && getConnection()) {\r\n        gf = await initGemFarm(getConnection(), getWallet()!);\r\n      }\r\n    });\r\n\r\n    // --------------------------------------- refresh farmer\r\n    const farmer = ref<string>();\r\n\r\n    const refreshFarmer = async () => {\r\n      return gf.refreshFarmerWallet(\r\n        new PublicKey(props.farm!),\r\n        new PublicKey(farmer.value!)\r\n      );\r\n    };\r\n\r\n    return {\r\n      farmer,\r\n      refreshFarmer,\r\n    };\r\n  },\r\n});\r\n"],"sourceRoot":""}]}