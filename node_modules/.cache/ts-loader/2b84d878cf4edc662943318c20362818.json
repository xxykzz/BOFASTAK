{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue?vue&type=script&lang=ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue","mtime":1650820970806},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1650821117514}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\components\\gem-bank\\Vault.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { defineComponent, onMounted, ref, watch } from 'vue';\r\nimport NFTGrid from '@/components/gem-bank/NFTGrid.vue';\r\nimport ArrowButton from '@/components/ArrowButton.vue';\r\nimport useWallet from '@/composables/wallet';\r\nimport useCluster from '@/composables/cluster';\r\nimport {\r\n  getNFTMetadataForMany,\r\n  getNFTsByOwner,\r\n  INFT,\r\n} from '@/common/web3/NFTget';\r\nimport { initGemBank } from '@/common/gem-bank';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { getListDiffBasedOnMints, removeManyFromList } from '@/common/util';\r\nimport { BN } from '@project-serum/anchor';\r\n\r\nexport default defineComponent({\r\n  components: { ArrowButton, NFTGrid },\r\n  props: {\r\n    vault: String,\r\n  },\r\n  emits: ['selected-wallet-nft'],\r\n  setup(props, ctx) {\r\n    const { wallet, getWallet } = useWallet();\r\n    const { cluster, getConnection } = useCluster();\r\n\r\n    // --------------------------------------- state\r\n\r\n    //current walet/vault state\r\n    const currentWalletNFTs = ref<INFT[]>([]);\r\n    const currentVaultNFTs = ref<INFT[]>([]);\r\n    //selected but not yet moved over in FE\r\n    const selectedWalletNFTs = ref<INFT[]>([]);\r\n    const selectedVaultNFTs = ref<INFT[]>([]);\r\n    //moved over in FE but not yet onchain\r\n    const desiredWalletNFTs = ref<INFT[]>([]);\r\n    const desiredVaultNFTs = ref<INFT[]>([]);\r\n    //moved over onchain\r\n    const toWalletNFTs = ref<INFT[]>([]);\r\n    const toVaultNFTs = ref<INFT[]>([]);\r\n\r\n    // --------------------------------------- populate initial nfts\r\n\r\n    const populateWalletNFTs = async () => {\r\n      // zero out to begin with\r\n      currentWalletNFTs.value = [];\r\n      selectedWalletNFTs.value = [];\r\n      desiredWalletNFTs.value = [];\r\n\r\n      if (getWallet()) {\r\n        currentWalletNFTs.value = await getNFTsByOwner(\r\n          getWallet()!.publicKey!,\r\n          getConnection()\r\n        );\r\n        desiredWalletNFTs.value = [...currentWalletNFTs.value];\r\n      }\r\n    };\r\n\r\n    const populateVaultNFTs = async () => {\r\n      // zero out to begin with\r\n      currentVaultNFTs.value = [];\r\n      selectedVaultNFTs.value = [];\r\n      desiredVaultNFTs.value = [];\r\n\r\n      const foundGDRs = await gb.fetchAllGdrPDAs(vault.value);\r\n      if (foundGDRs && foundGDRs.length) {\r\n        gdrs.value = foundGDRs;\r\n        console.log(`found a total of ${foundGDRs.length} gdrs`);\r\n\r\n        const mints = foundGDRs.map((gdr: any) => {\r\n          return { mint: gdr.account.gemMint };\r\n        });\r\n        currentVaultNFTs.value = await getNFTMetadataForMany(\r\n          mints,\r\n          getConnection()\r\n        );\r\n        desiredVaultNFTs.value = [...currentVaultNFTs.value];\r\n        console.log(\r\n          `populated a total of ${currentVaultNFTs.value.length} vault NFTs`\r\n        );\r\n      }\r\n    };\r\n\r\n    const updateVaultState = async () => {\r\n      vaultAcc.value = await gb.fetchVaultAcc(vault.value);\r\n      bank.value = vaultAcc.value.bank;\r\n      vaultLocked.value = vaultAcc.value.locked;\r\n    };\r\n\r\n    watch([wallet, cluster], async () => {\r\n      gb = await initGemBank(getConnection(), getWallet()!);\r\n\r\n      //populate wallet + vault nfts\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    });\r\n\r\n    onMounted(async () => {\r\n      gb = await initGemBank(getConnection(), getWallet()!);\r\n\r\n      //prep vault + bank variables\r\n      vault.value = new PublicKey(props.vault!);\r\n      await updateVaultState();\r\n\r\n      //populate wallet + vault nfts\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    });\r\n\r\n    // --------------------------------------- moving nfts\r\n\r\n    const handleWalletSelected = (e: any) => {\r\n      if (e.selected) {\r\n        selectedWalletNFTs.value.push(e.nft);\r\n      } else {\r\n        const index = selectedWalletNFTs.value.indexOf(e.nft);\r\n        selectedWalletNFTs.value.splice(index, 1);\r\n      }\r\n      ctx.emit('selected-wallet-nft', selectedWalletNFTs.value);\r\n    };\r\n\r\n    const handleVaultSelected = (e: any) => {\r\n      if (e.selected) {\r\n        selectedVaultNFTs.value.push(e.nft);\r\n      } else {\r\n        const index = selectedVaultNFTs.value.indexOf(e.nft);\r\n        selectedVaultNFTs.value.splice(index, 1);\r\n      }\r\n    };\r\n\r\n    const moveNFTsFE = (moveLeft: boolean) => {\r\n      if (moveLeft) {\r\n        //push selected vault nfts into desired wallet\r\n        desiredWalletNFTs.value.push(...selectedVaultNFTs.value);\r\n        //remove selected vault nfts from desired vault\r\n        removeManyFromList(selectedVaultNFTs.value, desiredVaultNFTs.value);\r\n        //empty selection list\r\n        selectedVaultNFTs.value = [];\r\n      } else {\r\n        //push selected wallet nfts into desired vault\r\n        desiredVaultNFTs.value.push(...selectedWalletNFTs.value);\r\n        //remove selected wallet nfts from desired wallet\r\n        removeManyFromList(selectedWalletNFTs.value, desiredWalletNFTs.value);\r\n        //empty selected walelt\r\n        selectedWalletNFTs.value = [];\r\n      }\r\n    };\r\n\r\n    //todo jam into single tx\r\n    const moveNFTsOnChain = async () => {\r\n      for (const nft of toVaultNFTs.value) {\r\n        console.log(nft);\r\n        const creator = new PublicKey(\r\n          //todo currently simply taking the 1st creator\r\n          (nft.onchainMetadata as any).data.creators[0].address\r\n        );\r\n        console.log('creator is', creator.toBase58());\r\n        await depositGem(nft.mint, creator, nft.pubkey!);\r\n      }\r\n      for (const nft of toWalletNFTs.value) {\r\n        await withdrawGem(nft.mint);\r\n      }\r\n      await Promise.all([populateWalletNFTs(), populateVaultNFTs()]);\r\n    };\r\n\r\n    //to vault = vault desired - vault current\r\n    watch(\r\n      desiredVaultNFTs,\r\n      () => {\r\n        toVaultNFTs.value = getListDiffBasedOnMints(\r\n          desiredVaultNFTs.value,\r\n          currentVaultNFTs.value\r\n        );\r\n        console.log('to vault nfts are', toVaultNFTs.value);\r\n      },\r\n      { deep: true }\r\n    );\r\n\r\n    //to wallet = wallet desired - wallet current\r\n    watch(\r\n      desiredWalletNFTs,\r\n      () => {\r\n        toWalletNFTs.value = getListDiffBasedOnMints(\r\n          desiredWalletNFTs.value,\r\n          currentWalletNFTs.value\r\n        );\r\n        console.log('to wallet nfts are', toWalletNFTs.value);\r\n      },\r\n      { deep: true }\r\n    );\r\n\r\n    // --------------------------------------- gem bank\r\n\r\n    let gb: any;\r\n    const bank = ref<PublicKey>();\r\n    const vault = ref<PublicKey>();\r\n    const vaultAcc = ref<any>();\r\n    const gdrs = ref<PublicKey[]>([]);\r\n    const vaultLocked = ref<boolean>(false);\r\n\r\n    const depositGem = async (\r\n      mint: PublicKey,\r\n      creator: PublicKey,\r\n      source: PublicKey\r\n    ) => {\r\n      const { txSig } = await gb.depositGemWallet(\r\n        bank.value,\r\n        vault.value,\r\n        new BN(1),\r\n        mint,\r\n        source,\r\n        creator\r\n      );\r\n      console.log('deposit done', txSig);\r\n    };\r\n\r\n    const withdrawGem = async (mint: PublicKey) => {\r\n      const { txSig } = await gb.withdrawGemWallet(\r\n        bank.value,\r\n        vault.value,\r\n        new BN(1),\r\n        mint\r\n      );\r\n      console.log('withdrawal done', txSig);\r\n    };\r\n\r\n    // --------------------------------------- return\r\n\r\n    return {\r\n      wallet,\r\n      desiredWalletNFTs,\r\n      desiredVaultNFTs,\r\n      toVaultNFTs,\r\n      toWalletNFTs,\r\n      handleWalletSelected,\r\n      handleVaultSelected,\r\n      moveNFTsFE,\r\n      moveNFTsOnChain,\r\n      bank,\r\n      // eslint-disable-next-line vue/no-dupe-keys\r\n      vault,\r\n      vaultLocked,\r\n    };\r\n  },\r\n});\r\n"],"sourceRoot":""}]}