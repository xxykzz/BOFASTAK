{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-farm\\index.ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-farm\\index.ts","mtime":1650820970790},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-farm\\index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, Keypair, PublicKey } from '@solana/web3.js';\r\nimport { SignerWalletAdapter } from '@solana/wallet-adapter-base';\r\nimport { BN, Idl } from '@project-serum/anchor';\r\nimport { createFakeWallet } from '@/common/gem-bank';\r\nimport {\r\n  GemFarmClient,\r\n  FarmConfig,\r\n  VariableRateConfig,\r\n  FixedRateConfig,\r\n  WhitelistType,\r\n  findWhitelistProofPDA,\r\n  GEM_FARM_PROG_ID,\r\n  GEM_BANK_PROG_ID,\r\n} from '@gemworks/gem-farm-ts';\r\nimport { programs } from '@metaplex/js';\r\n\r\nexport async function initGemFarm(\r\n  conn: Connection,\r\n  wallet?: SignerWalletAdapter\r\n) {\r\n  const walletToUse = wallet ?? createFakeWallet();\r\n  const farmIdl = await (await fetch('gem_farm.json')).json();\r\n  const bankIdl = await (await fetch('gem_bank.json')).json();\r\n  return new GemFarm(conn, walletToUse as any, farmIdl, bankIdl);\r\n}\r\n\r\nexport class GemFarm extends GemFarmClient {\r\n  constructor(conn: Connection, wallet: any, farmIdl: Idl, bankIdl: Idl) {\r\n    super(conn, wallet, farmIdl, GEM_FARM_PROG_ID, bankIdl, GEM_BANK_PROG_ID);\r\n  }\r\n\r\n  async initFarmWallet(\r\n    rewardAMint: PublicKey,\r\n    rewardAType: any,\r\n    rewardBMint: PublicKey,\r\n    rewardBType: any,\r\n    farmConfig: FarmConfig\r\n  ) {\r\n    const farm = Keypair.generate();\r\n    const bank = Keypair.generate();\r\n\r\n    const result = await this.initFarm(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      this.wallet.publicKey,\r\n      bank,\r\n      rewardAMint,\r\n      rewardAType,\r\n      rewardBMint,\r\n      rewardBType,\r\n      farmConfig\r\n    );\r\n\r\n    console.log('new farm started!', farm.publicKey.toBase58());\r\n    console.log('bank is:', bank.publicKey.toBase58());\r\n\r\n    return { farm, bank, ...result };\r\n  }\r\n\r\n  async updateFarmWallet(\r\n    farm: PublicKey,\r\n    newConfig?: FarmConfig,\r\n    newManager?: PublicKey\r\n  ) {\r\n    const result = await this.updateFarm(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      newConfig,\r\n      newManager\r\n    );\r\n\r\n    console.log('updated the farm');\r\n\r\n    return result;\r\n  }\r\n\r\n  async authorizeFunderWallet(farm: PublicKey, funder: PublicKey) {\r\n    const result = await this.authorizeFunder(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      funder\r\n    );\r\n\r\n    console.log('authorized funder', funder.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async deauthorizeFunderWallet(farm: PublicKey, funder: PublicKey) {\r\n    const result = await this.deauthorizeFunder(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      funder\r\n    );\r\n\r\n    console.log('DEauthorized funder', funder.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async fundVariableRewardWallet(\r\n    farm: PublicKey,\r\n    rewardMint: PublicKey,\r\n    amount: string,\r\n    duration: string\r\n  ) {\r\n    const rewardSource = await this.findATA(rewardMint, this.wallet.publicKey);\r\n\r\n    const config: VariableRateConfig = {\r\n      amount: new BN(amount),\r\n      durationSec: new BN(duration),\r\n    };\r\n\r\n    const result = this.fundReward(\r\n      farm,\r\n      rewardMint,\r\n      this.wallet.publicKey,\r\n      rewardSource,\r\n      config\r\n    );\r\n\r\n    console.log('funded variable reward with mint:', rewardMint.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async fundFixedRewardWallet(\r\n    farm: PublicKey,\r\n    rewardMint: PublicKey,\r\n    amount: string,\r\n    duration: string,\r\n    baseRate: string,\r\n    denominator: string,\r\n    t1RewardRate?: string,\r\n    t1RequiredTenure?: string,\r\n    t2RewardRate?: string,\r\n    t2RequiredTenure?: string,\r\n    t3RewardRate?: string,\r\n    t3RequiredTenure?: string\r\n  ) {\r\n    const rewardSource = await this.findATA(rewardMint, this.wallet.publicKey);\r\n\r\n    const config: FixedRateConfig = {\r\n      schedule: {\r\n        baseRate: new BN(baseRate),\r\n        tier1: t1RewardRate\r\n          ? {\r\n              rewardRate: new BN(t1RewardRate),\r\n              requiredTenure: new BN(t1RequiredTenure!),\r\n            }\r\n          : null,\r\n        tier2: t2RewardRate\r\n          ? {\r\n              rewardRate: new BN(t2RewardRate),\r\n              requiredTenure: new BN(t2RequiredTenure!),\r\n            }\r\n          : null,\r\n        tier3: t3RewardRate\r\n          ? {\r\n              rewardRate: new BN(t3RewardRate),\r\n              requiredTenure: new BN(t3RequiredTenure!),\r\n            }\r\n          : null,\r\n        denominator: new BN(denominator),\r\n      },\r\n      amount: new BN(amount),\r\n      durationSec: new BN(duration),\r\n    };\r\n\r\n    const result = await this.fundReward(\r\n      farm,\r\n      rewardMint,\r\n      this.wallet.publicKey,\r\n      rewardSource,\r\n      undefined,\r\n      config\r\n    );\r\n\r\n    console.log('funded fixed reward with mint:', rewardMint.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async cancelRewardWallet(farm: PublicKey, rewardMint: PublicKey) {\r\n    const result = await this.cancelReward(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      rewardMint,\r\n      this.wallet.publicKey\r\n    );\r\n\r\n    console.log('cancelled reward', rewardMint.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async lockRewardWallet(farm: PublicKey, rewardMint: PublicKey) {\r\n    const result = await this.lockReward(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      rewardMint\r\n    );\r\n\r\n    console.log('locked reward', rewardMint.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async refreshFarmerWallet(farm: PublicKey, farmerIdentity: PublicKey) {\r\n    const result = await this.refreshFarmer(farm, farmerIdentity);\r\n\r\n    console.log('refreshed farmer', farmerIdentity.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async treasuryPayoutWallet(\r\n    farm: PublicKey,\r\n    destination: PublicKey,\r\n    lamports: string\r\n  ) {\r\n    const result = await this.payoutFromTreasury(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      destination,\r\n      new BN(lamports)\r\n    );\r\n\r\n    console.log('paid out from treasury', lamports);\r\n\r\n    return result;\r\n  }\r\n\r\n  async initFarmerWallet(farm: PublicKey) {\r\n    const result = await this.initFarmer(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      this.wallet.publicKey\r\n    );\r\n\r\n    console.log('initialized new farmer', this.wallet.publicKey.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async stakeWallet(farm: PublicKey) {\r\n    const result = await this.stake(farm, this.wallet.publicKey);\r\n\r\n    console.log('begun staking for farmer', this.wallet.publicKey.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async unstakeWallet(farm: PublicKey) {\r\n    const result = await this.unstake(farm, this.wallet.publicKey);\r\n\r\n    console.log('ended staking for farmer', this.wallet.publicKey.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async claimWallet(\r\n    farm: PublicKey,\r\n    rewardAMint: PublicKey,\r\n    rewardBMint: PublicKey\r\n  ) {\r\n    const result = await this.claim(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      rewardAMint,\r\n      rewardBMint\r\n    );\r\n\r\n    console.log('claimed rewards for farmer', this.wallet.publicKey.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async flashDepositWallet(\r\n    farm: PublicKey,\r\n    gemAmount: string,\r\n    gemMint: PublicKey,\r\n    gemSource: PublicKey,\r\n    creator: PublicKey\r\n  ) {\r\n    const farmAcc = await this.fetchFarmAcc(farm);\r\n    const bank = farmAcc.bank;\r\n\r\n    const [mintProof, bump] = await findWhitelistProofPDA(bank, gemMint);\r\n    const [creatorProof, bump2] = await findWhitelistProofPDA(bank, creator);\r\n    const metadata = await programs.metadata.Metadata.getPDA(gemMint);\r\n\r\n    const result = await this.flashDeposit(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      new BN(gemAmount),\r\n      gemMint,\r\n      gemSource,\r\n      mintProof,\r\n      metadata,\r\n      creatorProof\r\n    );\r\n\r\n    console.log('added extra gem for farmer', this.wallet.publicKey.toBase58());\r\n\r\n    return result;\r\n  }\r\n\r\n  async addToBankWhitelistWallet(\r\n    farm: PublicKey,\r\n    addressToWhitelist: PublicKey,\r\n    whitelistType: WhitelistType\r\n  ) {\r\n    const result = await this.addToBankWhitelist(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      addressToWhitelist,\r\n      whitelistType\r\n    );\r\n\r\n    console.log(`${addressToWhitelist.toBase58()} added to whitelist`);\r\n\r\n    return result;\r\n  }\r\n\r\n  async removeFromBankWhitelistWallet(\r\n    farm: PublicKey,\r\n    addressToRemove: PublicKey\r\n  ) {\r\n    const result = await this.removeFromBankWhitelist(\r\n      farm,\r\n      this.wallet.publicKey,\r\n      addressToRemove\r\n    );\r\n\r\n    console.log(`${addressToRemove.toBase58()} removed from whitelist`);\r\n\r\n    return result;\r\n  }\r\n}\r\n"],"sourceRoot":""}]}