{"remainingRequest":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js??ref--14-2!C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-bank\\index.ts","dependencies":[{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-bank\\index.ts","mtime":1650820970790},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\babel.config.js","mtime":1650820970773},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1650821057627},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\babel-loader\\lib\\index.js","mtime":1650821057452},{"path":"C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\node_modules\\ts-loader\\index.js","mtime":1650821095383}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:\\Users\\ferna\\Desktop\\HiddenStaking\\gem-farm\\app\\gem-farm\\src\\common\\gem-bank\\index.ts"],"names":[],"mappings":"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","sourcesContent":["import { BN, Idl } from '@project-serum/anchor';\r\nimport {\r\n  findWhitelistProofPDA,\r\n  GEM_BANK_PROG_ID,\r\n  GemBankClient,\r\n  WhitelistType,\r\n} from '@gemworks/gem-farm-ts';\r\nimport { Connection, Keypair, PublicKey } from '@solana/web3.js';\r\nimport { SignerWalletAdapter } from '@solana/wallet-adapter-base';\r\nimport { NodeWallet, programs } from '@metaplex/js';\r\n\r\n//when we only want to view vaults, no need to connect a real wallet.\r\nexport function createFakeWallet() {\r\n  const leakedKp = Keypair.fromSecretKey(\r\n    Uint8Array.from([\r\n      208, 175, 150, 242, 88, 34, 108, 88, 177, 16, 168, 75, 115, 181, 199, 242,\r\n      120, 4, 78, 75, 19, 227, 13, 215, 184, 108, 226, 53, 111, 149, 179, 84,\r\n      137, 121, 79, 1, 160, 223, 124, 241, 202, 203, 220, 237, 50, 242, 57, 158,\r\n      226, 207, 203, 188, 43, 28, 70, 110, 214, 234, 251, 15, 249, 157, 62, 80,\r\n    ])\r\n  );\r\n  return new NodeWallet(leakedKp);\r\n}\r\n\r\n//need a separate func coz fetching IDL is async and can't be done in constructor\r\nexport async function initGemBank(\r\n  conn: Connection,\r\n  wallet?: SignerWalletAdapter\r\n) {\r\n  const walletToUse = wallet ?? createFakeWallet();\r\n  const idl = await (await fetch('gem_bank.json')).json();\r\n  return new GemBank(conn, walletToUse as any, idl);\r\n}\r\n\r\nexport class GemBank extends GemBankClient {\r\n  constructor(conn: Connection, wallet: any, idl: Idl) {\r\n    super(conn, wallet, idl, GEM_BANK_PROG_ID);\r\n  }\r\n\r\n  async initBankWallet() {\r\n    const bank = Keypair.generate();\r\n    const txSig = await this.initBank(\r\n      bank,\r\n      this.wallet.publicKey,\r\n      this.wallet.publicKey\r\n    );\r\n    return { bank, txSig };\r\n  }\r\n\r\n  async initVaultWallet(bank: PublicKey) {\r\n    return this.initVault(\r\n      bank,\r\n      this.wallet.publicKey,\r\n      this.wallet.publicKey,\r\n      this.wallet.publicKey,\r\n      'test_vault'\r\n    );\r\n  }\r\n\r\n  async setVaultLockWallet(\r\n    bank: PublicKey,\r\n    vault: PublicKey,\r\n    vaultLocked: boolean\r\n  ) {\r\n    return this.setVaultLock(bank, vault, this.wallet.publicKey, vaultLocked);\r\n  }\r\n\r\n  async depositGemWallet(\r\n    bank: PublicKey,\r\n    vault: PublicKey,\r\n    gemAmount: BN,\r\n    gemMint: PublicKey,\r\n    gemSource: PublicKey,\r\n    creator: PublicKey\r\n  ) {\r\n    const [mintProof, bump] = await findWhitelistProofPDA(bank, gemMint);\r\n    const [creatorProof, bump2] = await findWhitelistProofPDA(bank, creator);\r\n    const metadata = await programs.metadata.Metadata.getPDA(gemMint);\r\n\r\n    return this.depositGem(\r\n      bank,\r\n      vault,\r\n      this.wallet.publicKey,\r\n      gemAmount,\r\n      gemMint,\r\n      gemSource,\r\n      mintProof,\r\n      metadata,\r\n      creatorProof\r\n    );\r\n  }\r\n\r\n  async withdrawGemWallet(\r\n    bank: PublicKey,\r\n    vault: PublicKey,\r\n    gemAmount: BN,\r\n    gemMint: PublicKey\r\n  ) {\r\n    return this.withdrawGem(\r\n      bank,\r\n      vault,\r\n      this.wallet.publicKey,\r\n      gemAmount,\r\n      gemMint,\r\n      this.wallet.publicKey\r\n    );\r\n  }\r\n\r\n  async addToWhitelistWallet(\r\n    bank: PublicKey,\r\n    addressToWhitelist: PublicKey,\r\n    whitelistType: WhitelistType\r\n  ) {\r\n    return this.addToWhitelist(\r\n      bank,\r\n      this.wallet.publicKey,\r\n      addressToWhitelist,\r\n      whitelistType\r\n    );\r\n  }\r\n\r\n  async removeFromWhitelistWallet(bank: PublicKey, addressToRemove: PublicKey) {\r\n    return this.removeFromWhitelist(\r\n      bank,\r\n      this.wallet.publicKey,\r\n      addressToRemove\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}]}